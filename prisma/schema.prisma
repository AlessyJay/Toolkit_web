generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("TEST_DATABASE")
}

model User {
  id                String    @id @default(cuid())
  firstname         String?
  lastname          String?
  name              String?
  email             String    @unique
  password          String?
  phone             String?
  image             String?
  phoneVerified     Boolean   @default(false)
  emailVerified     DateTime?
  enabled2FA        Boolean   @default(true)
  createdAtDateTime DateTime  @default(now())
  updatedAtDateTime DateTime  @updatedAt
  Profile           Profile?
  Account           Account?
  Group             Group?
  Role              Role?

  @@map("Users")
}

model Profile {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userID], references: [id])
  userID String @unique

  @@map("Profile")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Group {
  id     Int    @id @default(autoincrement())
  userId String @unique
  title  String
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Role {
  id     Int    @id @default(autoincrement())
  userId String @unique
  title  String
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
